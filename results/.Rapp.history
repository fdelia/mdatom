x <- seq(5, 15, length=1000)
x
x <- seq(0, 15, length=1000)
0
x
y <- dnorm(x, mean=1, sd=0.1)
yy
<
y
plot(x,y,type="l",lwd=1)
plot(x,y,type="l")
y <- dnorm(x, mean=1, sd=0.01)
plot(x,y,type="l")
y <- dnorm(x, mean=1, sd=0.3)
plot(x,y,type="l")
yc <- pnorm(x,mean=1,sd=0.1)
plot(x,yc,type="l")
x <- seq(0, 2, length=1000)
yc <- pnorm(x,mean=1,sd=0.1)
plot(x,yc,type="l")
plot(x,y,type="l")
y <- dnorm(x, mean=1, sd=0.01)
plot(x,y,type="l")
yc <- pnorm(x,mean=1,sd=0.1)
plot(x,yc,type="l")
yc <- pnorm(x,mean=1,sd=0.5)
plot(x,yc,type="l")
plot(x,y,type="l")
f <- function(x){}
f
f <- function(x, m, std){1/sqrt(m*2*pi)}
pi
sqrt
f <- function(x, m, std){1/sqrt(m*2*pi)*exp()}
f(1,1,1)
f <- function(x, m, std){1/sqrt(m*2*pi)*exp(1)}
f(1,1,1)
x <- seq(0, 2, length=1000)
y <- dnorm(x, mean=1, sd=0.5)
plot(x,y,type="l")
y <- dnorm(x, mean=1, sd=0.25)
plot(x,y,type="l")
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), max(dat1$V9, dat3$V9))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), max(dat1$V9, dat3$V9))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), max(dat1$V9, dat3$V9))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), max(dat1$V9, dat3$V9, 10))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9), 10))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9), 5))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9), 5))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
#lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
dat3$V9
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)
dat3[,9] <- as.numeric(as.character(dat3[,9]))
dat3$V9
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))
dat3$V9
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)
dat3$V9
names(dat3)
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9)))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
#lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9)))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
#lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9)))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
#lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9)))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9)))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath, 2 atoms')
# use your own directory, if not already set#
setwd('/Users/fabiodelia/Dropbox/Studium CSE/Statistische Physik und Computer Simulation/mdatom/sources/results')#
#
dat1 = read.csv('resultsFor1.txt', sep='', header = FALSE)#
dat3 = read.csv('resultsFor3.txt', sep='', header = FALSE)#
# dat$V1 is step#
# dat$V9 is average energy at this step#
#
# V9 is read as factor... convert#
dat1[,9] <- as.numeric(as.character(dat1[,9]))#
dat3[,9] <- as.numeric(as.character(dat3[,9]))#
#
# remove cases with errors (NaN, inf etc)#
dat1 <- do.call(data.frame,lapply(dat1, function(x) replace(x, is.infinite(x),0)))#
dat3 <- do.call(data.frame,lapply(dat3, function(x) replace(x, is.infinite(x),0)))#
dat1 = dat1[dat1$V9>0,]#
dat3 = dat3[dat3$V9>0,]#
#
xrange = range(0,10000)#
yrange = range(min(dat1$V9, dat3$V9), min(max(dat1$V9, dat3$V9),2))#
#
plot(xrange, yrange, type='n', xlab='Steps', ylab='E_tot')#
lines(dat1$V1, dat1$V9, type='l', col='blue')#
lines(dat3$V1, dat3$V9, type='l', col='green')#
legend('topright', inset=.05, title='coupling', c('collisions', 'pressure scaling'), fill=c('blue', 'green'))#
#
title(main='Coupling to a temperature or pressure bath')
